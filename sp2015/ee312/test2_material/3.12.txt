EE 312 Lecture (by Ben)
3.12.15
=======================

// Copy all odd elements of x into y
// Will return the number of odds
int copyOdd(int x[],  int n, int y[]){
	if (n == 0){
		return 0;
	}	
	if (*x % 2 == 1){
		*y = *x;
		return 1 + copyOdd(x+1 , n-1, y+1);
	}
	else {
		return copyOdd(x+1, n-1, y);
	}
}

rules for this class with recursion:
1. No globals.
2. No loops.
3. No goto. :'(

// sub is a subsequence of seq
// if all its elements are in seq
// ex. seq = "Hello World", sub = "lWo"
bool subseq(char* seq, char* sub){
	// Base Case
	if(*sub == 0){
		return true;
	}
	if (*seq == 0){
		return false;
	}
	if (*sub != *seq){
		seq += 1;
		return subseq(seq, sub);
	}
	if (*sub == *seq){
		seq += 1;
		sub += 1;	
		return subseq(seq, sub);
	}
}
Works via induction: work your way up from the base case, 
which you know to be true.

// Exhaustive search problem
// Determine whether there exists exactly
// k distinct elements in the array x
// that add up to v
int sumsTo(int[] x, int n, int k, int v){
	if (k == 0){
		if (v == 0){
			return 1;
		} else {
			return 0;
		}
	}
	if (n == 0){
		return 0;
	}
	// using the value at x
	int a = sumsTo(x+1, n-1, k-1, v - x[0]);

	// not using value at x
	int b = sumsTo(x+1, n-1, k, v);
	
	// we need to check if either of those cases would work	
	return a || b;
}

// evaluates polynomial with value x
// coeffs is coefficient of each variable
// n is size of coeffs
double poly(double x, double coeffs[], unsigned n){
	if (n == 1){
		return coeffs[0];
	}
	// Break up arrays
	// Take off the first element
	double answer = x * poly(x, coeffs + 1, n-1) + coeffs[0];
	return answer;
}

// is there some equation x = c1*a + c2*b?
bool isLinear(int x, int a, int b){
	bool j = false;
	bool k = false;
	
	if (x == 0){
		return true;
	}
	if (x - a >= 0){
		j = isLinear(x-a,a,b);		
	}
	if (x - b >= 0){
		k = isLinear(x-b,a,b);
	}
	return j || k;
}
