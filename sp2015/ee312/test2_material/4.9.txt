EE 312 Lecture
4.9.15
==============
Project 9 and 10 will be posted soon -- don't wait to get started on them, they're long.
 
Binary Search Tree (continued)
------------------------------
Vector example:
                Unsorted        Sorted          Binary Search Tree  BST (worst case, only for our implementation)
    1. find     O(N)            O(logN)         O(logN)             O(N)
    2. insert   O(1)*           O(N)            O(logN)             O(N) 
    3. remove   O(1)            O(N)            O(logN)             O(N)
    4. scan     O(N)            O(N)            O(N)                O(N)

Implementation:
    We still want the array to be sorted but don't want to move everything to insert or remove an element.
    _________________
    | 1 2 3 4 5 6 7 |
    -----------------
    Result: build a linked data structure. Can't use a linked list though! (binary search won't work).
    ___  ___  ___  ___  ___  ___
    |1|->|2|->|3|->|4|->|5|->|6|
    ---  ---  ---  ---  ---  ---

    First pointer points to the middle (four), and each successive link points to the next point to search
    in the binary search algorithm.
    
    4 -> 2 -> 1
           -> 3

      -> 6 -> 5
           -> 7

    *** See your paper notes for diagrams (ASCII is hard) *** 

Consequences of the binary search property:
    - If you want to add a value by adding a new leaf to the tree,
        there is ONLY ONE UNIQUE LOCATION the leaf can be placed

For a given tree frame (tree topology), there is only one way to insert the values of the tree
that satisfies the bst requirement.
The successsor of p is always either a descendant or an ancestor-- never a cousin.
    Order of decision making:
    1. the smallest value in right subtree
    2. nearest ancestor where p is a left descendant.

In order to pull off a scanning operation like this, we need our list to be doubly-linked.
    pointer to parent and pointer to child so we can move up and down the tree
******************* bst.cpp
#include <stdio.h>
#inlcude <stdint.h>

struct Node {
    int32_t value; // not useful
    Node* right;
    Node* left;
    Node* parent;
}

// Ignoring duplicates
Node* insertTree(Node* root, int32_t value) {
    // Step one: make a new leaf
    Node* child = new Node;
    child->value = value;
    child->left = 0;
    child->right = 0;

    // special case of an empty tree
    if (!root) {
        root = child; 
        return root;
    }

    // Step two: find the parent for this new leaf 
    Node* parent = nullptr; // keyword that indicates zero, but can't be confused for a number
    Node* p = root;
    while(p){
        parent = p;
        if (value < parent->value){
            p = parent->left;
        } else {
            p = parent->right;
        }
    }

    // Step three: insert the leaf as a child of parent
    if (value < parent->value) {
        parent->left = child;
    } else {
        parent->right = child;
    }
    child->parent = parent;
    return root;
}

Node* smallest(Node* root) {
    Node* p = root;
    while(p && p->left) { // Cover the special case-- short if p is nullptr
        p = p->left;
    }
    return p;
}

Node* successor(Node* p) {
    if (p->right) { // right subtree exists, return smallest value in right subtree
        return smallest(p->right);
    } else { // right subtree is null, return nearest ancestor larger than p
        Node* parent = p->parent;
        while(parent && p != parent->left){ // continue while parent still exists and p is not a left child of parent
            p = parent;
            parent = p->parent; 
        }    
        return parent;
    }
}

void printTree(Node* root) {
    Node* p = smallest(root);
    const char* prefix = "";
    while(p) {
        printf("%s%d", prefix, p->value);
        prefix = ", ";
        p = successor(p);
    }

int main(void) {
    Node* my_tree = nullptr; // empty tree
    insertTree(my_tree, 10);
    insertTree(my_tree, 5);
    insertTree(my_tree, 20);
    insertTree(my_tree, 8);
    insertTree(my_tree, 15);
    insertTree(my_tree, 40);
    printTree(my_tree);
}
