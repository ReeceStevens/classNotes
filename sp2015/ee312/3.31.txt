EE 312 Lecture
3.31.15
==============
Project 7 is a repeat of Project 4 (customer database), implemented in C++ data structures

Vectors (continued)
    Operator Syntax     
    v[6] => v.operator[](6)
    Using left side assignment?
        v[6] = 42; ==> v.operator[](6) = 42 (doesn't work, since it returns an R-value)
        vocab note: r-value is a value for the right side of the equation (numbers)
                    l-value is a value for the left side (variables, memory locations)
        Solution: use references
            ----- in Vector.h   -----
                int32_t& operator[](uint32_t k);
            ----- in Vector.cpp -----
                int32_t& Vector::operator[](uint32_t k) { // reference automatically returns address
                                                             in our return value (& in front of return type)
                    ....
                    return this->data[k];
                }     
            The reference is a type of compiler-side pointer; it automatically places the dereferencing operator
            in front of the [] operator!
            So, instead of the client using *(v[6]) = 42, they can say v[6] = 42 and the compiler can sub in the star. 
    Improved syntax for malloc() and free() in cpp
        --- NEW ---
        this->data = new int32_t[sz];
        ** remember if you have an uninitialized pointer, it isn't set to NULL-- it can point anywhere! **
        This syntax DOES fix this loophole:
            Vector* p = (Vector*) malloc(sizeof(Vector));
            Vector* q = new Vector; // This won't compile!
            Vector* q = new Vector(10); // This will!
            ** Uninitialized vector! **
        Equivalent steps:
            q = malloc(sizeof(Vector));
            (*q).Vector(10); (note that this syntax won't compile)
        Summary of improvements in new:
            1. Automatically typecasts
            2. Automatically scales size
            3. Requires structures to be initialized
        
        delete old_data; // compare to free(old_data);
            delete calls the destructor for the structure
            closes the cleanup loophole -- if there was another pointer to the heap in the structure, if the 
                client called free() it would still be there (memory leak!)
            delete ensures that all pointers to the heap associated with the structure being destroyed are deallocated.
            *** SQUARE BRACKETS RULE ***
                If you allocate the object with square brackets, you have to deallocate it with square brackets.
                delete[] old_data;
            Equivalent steps:
                q->~Vector();
                free(q);

***************************************************************************************************
C++ Constructs in Review
    1. Public vs. Private
    2. Member functions (declared inside struct)
        a. Function name changes (struct name prepended, Vector::size(void)) 
        b. Gain access to private variables of any object of that type
        c. Implicit param "this" *** DOESN'T HAPPEN IF YOU DECLARE THE FUNCTION STATIC ***
    3. Constructors
    4. Destructors (always use delete!)
    5. Function overloading
    6. Operator overloading
        a + b => operator+(a,b); 
        You can define a meaning for operators... including commas!
        x[a,b] (you can allow for real matrix addressing!
    7. new / delete
    8. References
***************************************************************************************************

// Convention for C++ is to pass a reference to a struct instead of a pointer
// convenience: you use a dot operator with a reference instead of an arrow
printVector(const Vector& v){ // If you can promise you won't modify their data, declare it const
    ...
}

Function Overloading -- The functions have the same name but deal with different types, so the 
    compiler appends initials of the argument data types to the function name!
int min(int x, int y) {
    if (y < x) {return y;}
    else {return x;}
}
// Vastly different on the machine level! Completely different Logical Units.
double min(double x, double y) {
    if (y < x) {return y;}
    else {return x;}
}

Equivalent in C macro:
    #define min(x,y) ((y)<(x)?(y):(x))
    Funny exception: min("hello", "world")
        since both are just pointers, whichever is stored first will be greater!
        Can't account for this with the C macro, but can with C++ function overloading.

New String abstract data type for Project 7
    Check the .h file   
