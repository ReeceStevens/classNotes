EE 312 Lecture
3.3.15
==============

Four Rules for Big-Oh
---------------------
1. Straight line is O(1)
2. If/else, identify the worst case
3. loops, O(# of iterations)
4. Functions- analyze as if the function was copy-pasted into the existing code

Apply these concepts to bubblesort

O(n + n^2): number of times k is incremented plus the iterations of the loop
becomes O(n^2)
for(int k = 0; k < n; k++) {
	for (int j = 0; j < n; j++){
	}
}

Big-Oh counting:
	n + [n-1 + n-1 + ... + n-1]
	n + n(n-1) = n + n^2 - n => O(n^2)
for(int k = 0; k < n; k++) {
	for (int j = 1; j < n; j++){
	}
}

Big-Oh counting:
	n + [n-1 + n-1 + ... + n-1]
for(int k = 0; k < n; k++) {
	for (int j = 1; j < n; j++){
		if (x[j] < x[j-1]) {
			swap(&x[j], &x[j-1]);
			---> expanding in place
			---> int t = *a;
			---> *a = *b;
			---> *b = t;

			// All of the swap function is O(1)
		}
	}
}

Big-Oh counting:
	n + [n-1 + n-2 + n-3 + ... + 3 + 2 + 1]
	Sum outer terms in pairs to get: (T+1)(T/2) = O(T^2) *******KNOW THIS SEQUENCE SHORTCUT********
for(int k = 0; k < n; k++) {
	for (int j = 1; j < n-k; j++){ // After every sweep, we know the last element we touched is in the correct place.
		if (x[j] < x[j-1]) {
			swap(&x[j], &x[j-1]);
			---> expanding in place
			---> int t = *a;
			---> *a = *b;
			---> *b = t;

			// All of the swap function is O(1)
		}
	}
}

Big-Oh counting:
	O(log(n))
for (int k = 1; k < n; k = k*2){
	i = i+1;
	// find i = f(n);
	// k | 1 2 4 8 16 ... n
	// i | 0 1 2 3 4  ... n
	// therefore,
	// n = k = 2^i
	// i = log_2(n)
	// Essentially, how many times can we double i to get n?
}

Big-Oh counting:
	log_2(n) + [n + n + n + ... + n]
	log_2(n) + log_2(n)*n ---> O(nlog(n))
for (int k = 1; k < n; k = k*2) {
	for (int j = 1; j < n; j++){
	}
}

Big-Oh counting:
	log_2(n) + [log_2(n) + ... + log_2(n)]
	log_2(n) + (log_2(n))^2
	O(log^2(n))
for (int k = 1; k < n; k = k*2) {
	for (int j = 1; j < n; j = j*2){
	}
}

Big-Oh counting:
	log_2(n) + [1 + 2 + 4 + ... + n/2] = log_2(n) + n-1	
	Think about adding in binary: adding powers of two until 
	you reach one below the power of n
	Result: O(n)
for (int k = 1; k < n; k = k*2) {
	for (int j = 1; j < k; j = j + 1){
	}
}

Sequence to know for the exam
	1 + 2 + 4 + 8 + ... + T = O(T)
	There are log(T) numbers in this series
	2^(log_2(T))

Exam Notes:
	Using global variables
	two or three basic programming questions in beginning
	Stack frame parameters
	Pointers (full page)
	malloc/free and the heap
		specifically, malloc doesn't understand metadata and data distinction
		combine predecessor before successor
	Big-Oh
	ASCII relationships
		'A' + 1 = 'B'

