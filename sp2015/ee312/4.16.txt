EE 312 Lecture
4.16.15
==============
Project 9: Style matters. Code effectively.

Today: C++ partAy
Goal: get rid of return values that you only use 10% of the time (spells trouble for client)

typedef Node* NodePtr; // just a typedef to remove the asterisks (not critical)

// Ignoring duplicates
Node* insertTree(NodePtr& root, int32_t value) {
// Root is a reference to someone else's variable, named root. i.e., root is a pre-existing variable.
// Without the (&), it's a new variable named root that's only in this stack frame!
// At the C level, you'd make the client pass the address of their pointer so you can change the location it points to.`
    // Step one: make a new leaf
    Node* child = new Node;
    child->value = value;
    child->left = 0;
    child->right = 0;

    // special case of an empty tree
    if (!root) {
        root = child; 
        return root;
    }

    // Step two: find the parent for this new leaf 
    Node* parent = nullptr; // keyword that indicates zero, but can't be confused for a number
    Node* p = root;
    while(p){
        parent = p;
        if (value < parent->value){
            p = parent->left;
        } else {
            p = parent->right;
        }
    }

    // Step three: insert the leaf as a child of parent
    if (value < parent->value) {
        parent->left = child;
    } else {
        parent->right = child;
    }
    child->parent = parent;
    return root;
}

int removeTree(NodePtr& root, int32_t v) {
    // Step 1: find the node containing that value.
    Node* p = root;
    while(p && p->value != v) { // Check for null ptr, value doesn't exist in tree. Also handles null tree case.
        if (v<p->value) {
            p = p->left;
        } else {    
            p = p->right;
        }
    }
    if (!p) { return false; } // Value doesn't exist in our tree. Get out!

    // Step 2: Decide which case applies.
    if (p->right == nullptr) { // easy, no right subtree
        Node* parent = p->parent; // Just for making the code easier to write
        
        Node* child = p->left;
        if (parent == nullptr){ // Detect the special case.
            root = child;
            if (child) {child->parent = nullptr; }
            child->parent = nullptr;
            return true;      
        }
        if (p == parent->left) {
            parent->left = child;
        } else {
            parent->right = child; 
        }
        if (child) { child->parent = parent; }
    } else { // Hard case, right subtree exists
        Node* s = successor(p); // since there's a right subtree, there has to be a successor. 
        // Successor is the SMALLEST VALUE IN THE RIGHT SUBTREE. Therefore it has no left child.
        // Steal value from the successor and remove the successor.
        p->value = s->value;
        Node* parent = s->parent;
        Node* child = s->right;
        if (s == parent->left) {
            parent->left = child;
        } else {
            parent->right = child; 
        }
        if (child) { child->parent = parent; } // protect in case s->right is null.
        delete s;
    }

    return true;
}

// Time complexity: Linear!
void recursiveDelete(Node* root){
	if (!root) {
		return;
	}
	recursiveDelete(root->left);
	recursiveDelete(root->right);
	delete root;
}

Node* recursiveCopy(Node* root) {
	if (!root) {
		return nullptr;
	}
	Node* p = new Node;
	p->value = root->value;
	p->parent = nullptr;

	Node* t1 = recursiveCopy(root->left);
	Node* t2 = recursiveCopy(root->right);

	p->left = t1;
	if (t1) { t1->parent = p; }
	p->right = t2;
	if (t2) { t2->parent = p; }
	return p;
}

stuct BST{
private:
	Node* root;
	uint32_t length;
public:
	BST(void){ // default constructor!
		length = 0;
		root = nullptr;
	} 

	~BST(void){
		
	}

	void insert(int32_t v) {
		insertTree(root, v);
	}

	void remove(int32_t v) {
		if (removeTree(root, v)){; // we can add a return value b/c we're the only ones using this fcn! not the client
			length -= 1;
		}
	}

	// In the absence of a copy constructor, the compiler makes a shallow copy.
	// Recursively copy the tree over!
	BEST(const BST& that){
		length = that.length;
		root = recursiveCopy(that.root);
	}	

	BST& operator=(const BST& that){
		if (&that != this) { 
			recursiveDelete(root);
			root = recursiveCopy(that.root);
			length = that.length;
		}
		return *this;
	}
}

int main(void) {
    Node* my_tree = nullptr; // empty tree
	BST my_tree;
	my_tree.insert(10);
    insertTree(my_tree, 10);
    insertTree(my_tree, 5);
    insertTree(my_tree, 20);
    insertTree(my_tree, 8);
    insertTree(my_tree, 15);
    insertTree(my_tree, 40);
    printTree(my_tree);
}
