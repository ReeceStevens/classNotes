EE 312 Lecture
3.26.15
==============
Last time: we did the vector data structure in C

Analysis:

while (len < N) { // N times
	if (len == cap) {
		malloc(...) // We consider it to be O(1)
		for (k = 0;, k < len; k += 1){
		}
		free(...); // We consider it to be O(1)
	}
	len += 1;
	cap += 1; // This means O(n^2) since the if statement will always be true
}

while (len < N) { // N times
	if (len == cap) {
		malloc(...) // We consider it to be O(1)
		for (k = 0;, k < len; k += 1){
		}
		free(...); // We consider it to be O(1)
		cap *= 2; // This means O(n)
	}
	len += 1;
}

Analyzing the more complicated version:
False case: O(n)
while(len < N) {
	len += 1;
}

True case: O(n)
while (len < N) { // N times
		for (k = 0;, k < len; k += 1){
		}
		cap *= 2; // This means O(log(n))?
	len += 1;
}

sum the cases: O(n) + O(n) = O(n)

Average time complexity:
total / count = avg.
O(N) / N = O(1). -- on average, push_back is a constant.

**** push_back is amortized O(1), worst case O(n) ****
average case means typical; average time complexity is actually called amortization.
motivation for using the term amortization: worst case is a big investment, but other cases are "free"
the average cost per run is about O(1)


public vs. private: private is NOT a security feature. It simply enforces the "no object peeking" rule.
class and struct are EXACTLY THE SAME-- struct defaults to public, class defaults to private (only difference)
****************************** Vector.h
#ifndef _Vector_h
#define _Vector_h 1

struct Vector {
private:
	uint32_t length; // number of elements stored in the vector
	uint32_t capacity; // size of the array (amount of available storage)
public:
	int32_t* data; // pointer to the array on the heap (never null)

	// Build a constructor
	Vector(uint32_t sz);

	// Clean up the vector (deallocate array on heap)
	void destroyVector();

	// return value of kth element (zero based) of the array
	int32_t operator[](uint32_t k);

	// Change the value of the kth element of v to be x
	void set(uint32_t k, int32_t x);

	// Append the value x to the end of the vector v
	void push_back(int32_t x);
	
	~Vector();
};


#endif

Now we have to convince the compiler that our functions are part of the design, not client code.
Thus, we make our functions member functions.
Member Functions:
	1. Access to all private variables of the struct
	2. The function's name is changed; the struct's name is prepended.
		(it's not inside the struct!!! It's just granted permission to access private components of the struct)
	3. You get an extra parameter (implicit), struct Vector* this
****************************** Vector.cpp
/* THIS PROGRAM AIN'T RIGHT we didn't pass the Vector struct as a pointer */

#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <assert.h>
#include "Vector.h"

Vector::Vector(uint32_t size) { // For constructors, you are NOT ALLOWED TO DECLARE A RETURN TYPE (??)
	this->length = sz;
	this->capacity = sz;
	this->data = (int32_t*) malloc(sz * sizeof(uint32_t));
	
	for (uint32_t k = 0; k < sz; k += 1) {
		this->data[k] = 0;
	}

	return result;
}

#define size(v) ((v).length)

uint32_t Vector::size(void){
	return length;
}

void Vector::destroyVector(){
	free(v.data);
	v.capacity = 0;
	v. length = 0;
}

// super dang inefficient
int32_t Vector::operator[](uint32_t k) { // Allow client to use [] syntax!
	assert(k < length); // if not in debug mode, compiler ignores these
	return data[k];
}

// super dang inefficient
void Vector::set(Vector v, uint32_t k, int32_t x) { 
	assert(k < v.length);
	v.data[k] = x; 
}

void Vector::push_back(int32_t x) {
	if (this->length == v->capacity){
	int32_t* old_data = v->data;
	v->capacity *= 2; // Reduces the time complexity from quadratic to LINEAR!!!
	int32_t* new_data = (int32_t*) malloc((v->length + 1)*sizeof(int32_t));
	for (uint32_t k = 0; k < v->length; k += 1){
		new_data[k] = old_data[k];
	}
	free(old_data);
	v->data = new_data;
	}
	v->data[v->length] = x;
	v->length += 1;
}

Vector::~Vector(){ // it's a pun... "not constructor"
	free(this->data);
}

Arguments for implicit functions are passed at the beginning of the function name.

Do not worry about function call overhead-- any small function is put in-line by the compiler (c++ feature).

The compiler runs the destructor function for any existing objects when you leave a stack frame
****************************** Client side file
#include <stdio.h>
#include <stdlib.h>
#include "Vector.h"

void printVector(Vector x){
	const char* prefix = "";
	for (uint32_t k = 0; k < x.size(x); k += 1){
		printf("%s%d", prefix, x[k]);
		prefix = ", ";
	}
	printf("\n"):
}

// Client side
int main(void){
	Vector v(10);	
	// or Vector v{10};
	// or Vector v = Vector(10)
	
	v = createVector(10);
	for (uint32_t k = 0; k < 10;, k += 1){
		set(v,k, k+1);	// v[k] = k + 1
	}
	set(v,6,42);
	push_back(v, 11);

	printVector(v);	
}
