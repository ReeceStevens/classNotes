EE 312 Lecture
2.10.15
==============
Strings in C
	Convention to end with a null terminator is strictly a C convention
	Pro: Compact
	Con: You have to calculate length, it isn't intrinsically given
	
	
		
	uint32_t strlen(char s[]){
		uint k = 0;
		while (s[k]){
			k += 1;
		}
		return k;
	}
	
	Project 3 - last pointer practice
		pointers of different type pointing to same thing
		We're gonna sneak the length of a string right *before* the actual string
	
	Problematic functions
		strcpy(char dst[], char src[]) {
			uint k=0;
			while(src[k]){
				dst[k] = src[k];
				k += 1;
			}
			dst[k] = 0;
		}
		
		One of the biggest internet worms in history runs off this principle
		* No sense of how big the destination array is!!! Will just continue writing *
		Doesn't check for a buffer overflow
		We're gonna make our own strcpy that IS protected from a buffer overflow
		
	Improved string setup:
						 |----->| length
	MagicNumber | 10 | 5 | Craig\0       |
						 |------------->| capacity
	Our length metadata is represented in ints
	MagicNumber is a number we choose that will always be there in our custom string
	i.e. ~0xDEADBEEF
	
Dynamic Memory Management and The Heap
	If you know how much data you need, just declare a variable.
	We could just make some really big variable, but we'll run out of memory pretty fast.
	The heap is used to store variables that should last longer than the function that creates them
		Also used when we don't know how much data we'll need
	
*** KNOW ALL THE DETAILS OF BOTH MALLOC AND FREE TO THE T ***	
	Actual implementation of malloc and free gets its data from the OS, but everything else is the same
	malloc
		malloc(size)
			- must be the size of bytes
			- malloc must 
				1. Find a block of *contiguous* storage that is
					a. at least size bytes
					b. not currently busy
				2. Return a pointer to 1st byte of that block
				3. If malloc cannot find a block, must return a null pointer (not crash)
		
		int the_heap[100];
			--------------------
			|		free		|
			|___________________|
			|					|
			|		busy		|
			|___________________|
			|					|	
			|		free		|
			|___________________|
		char* p = malloc(6);
		*p = 6; // If malloc failed, the program will crash
		
	free
		free(p)
			- p must point to the 1st byte in a block previously returned by malloc and not already freed
			- free must mark that block as available

	Malloc and free both have to take "notes" to keep track of what data is free or busy
		This is primarily what we'll be tested over
	For each chunk, we have the following metadata:
		- size of chunk (integer)
		- status (busy/free) - one bit
	Metadata structure we're using
		Knuth Heap
			use an integer for both pieces of metadata
			abs value of int is the size, sign is the status
			his choice: negative > busy, positive > free
			His next idea: store the metadata *twice* (this is useful, right now we can use it to check for a buffer overflow
			Final design property: Try to have as few blocks as possible at any given moment
			First Fit- we use the first available block
			If the whole heap were a single block, first and last 4 bytes hold the available size of the element	

			--------------------- 99
			|		98			|
			|___________________|
			|					|
			|					|
			|___________________|
			|					|	
			|		98			|
			|___________________| 0

		p = malloc(6); // malloc MUST give a block at least as large as the requested size
		// Malloc deals with an int array, so it rounds up to the nearest multiple of four (int)
			

			--------------------- 99
			|		94			|
			|___________________|
			|					|
			|___________________|
			|_______94__________|
			|_______-2__________|	
			|___________________| <--- p
			|________-2_________| 0

		q = malloc(1); // To find the first block, move the absolute value of the block size + 2 and check the next block. If neg, repeat.
					   // If positive, split the block again and mark the allocated block as negative (busy); return pointer to 1st byte of block

		free(p); // Change both metadata integers to positive (if the metadata doesn't match, you know a buffer overflow happened)
		r = malloc(1);
		free(q);	
		free(r);
		// We're gonna recognize that the minimum chunk size is 3 (metadata, int, metadata) and never let the block get smaller than that.
		r is gonna get more space that it requested since the remaining int would not be big enough to express another block.
		When a block is freed and it is adjacent to another freed block, we will merge them in order to minimize metadata (minimize number of blocks).
		
